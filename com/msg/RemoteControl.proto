syntax = "proto2";
package apb;

import "nanopb.proto";
import "Types.proto";
import "CommonMsg.proto";

//Configure the robot match paramters
message ConfigureMatch
{
	required uint32 strategy = 1;
	required eColor matchColor = 2;
}

//request the robot to turn to head to destination, then go ahead
message RequestGoto {
	required Point			target				= 1;
	required eDir			direction			= 2;
}

//relative motion order to go in straight line
message RequestGotoCap {
	required PointCap		target				= 1;
	required eDir			direction			= 2;
}

message Log {
	required uint32			date				= 1;
	required eLogLevel		level				= 2;
	required string			component			= 3 [(nanopb).max_size = 16];
	required string			text				= 4 [(nanopb).max_size = 200];
}

//feedback on Robot low level states
message Telemetry
{
	required uint32			date				= 1;
	required NavState 		nav 				= 2;
	required ActuatorsState actuators			= 3;
}

//----------------------------------------------------------------------
// Multiplexer : this message is used to encapsulate all the other
//               so that several messages can be sent on the same
//               communication link.
//----------------------------------------------------------------------

message RemoteControlRequest
{
	oneof type
	{
		//messages from 0 to 99 are general purpose messages
		EmptyMsg 			getOsStats 			= 1;
		EmptyMsg 			getOsStatsLogs		= 2;
		EmptyMsg 			getTelemetry		= 3;
		EmptyMsg			reboot				= 4;
		Melody				requestPlaySound	= 5;

		//messages from 100 to 199 are reserved fo strategy
		ConfigureMatch 		configureMatch 		= 100;
		EmptyMsg 			startMatch 			= 101;

		//messages from 200 to 299 are reserved fo navigation
		PointCap			setPosition			= 200;
		RequestGoto        	requestGoto			= 210;
		RequestGotoCap      requestGotoCap		= 211;
		bool				requestBlockRobot   = 230;

		//messages from 300 to 399 for design tests
			//communication tests
		EmptyMsg			requestMaxLengthMsg = 300;
		EmptyMsg			requestCrcFailMsg 	= 301;
		EmptyMsg			requestTooLittleMsg = 302;
	}
}

message RemoteControlResponse
{
	oneof type
	{
		Log					log					= 1;
		EmptyMsg 			osStats 			= 2;
		Telemetry			telemetry			= 200;
	}
}