syntax = "proto3";
package apb;

import "nanopb.proto";
import "Types.proto";
import "CommonMsg.proto";

//Configure the robot match paramters
message ConfigureMatch
{
    uint32 strategy = 1;
    eColor matchColor = 2;
    uint32 simulated = 3;
}

//request the robot to modify its speeds. If params are set to 0 => restore config speed
message SetSpeedAcc {
    uint32          vMax                = 1; //mm/s
    uint32          vMaxTurn            = 2; //°/s
    uint32          accMax              = 3; //mm/s2
    uint32          accMaxTurn          = 4; //°/s2
}

//request the robot to turn to head to destination, then go ahead
message RequestGoto {
    Point           target              = 1;
    eDir            direction           = 2;
}

//relative motion order to go in straight line
message RequestGotoCap {
    PointCap        target              = 1;
    eDir            direction           = 2;
}

message Log {
    uint32            date              = 1;
    eLogLevel         level             = 2;
    string            component         = 3 [(nanopb).max_size = 16];
    string            text              = 4 [(nanopb).max_size = 200];
}

//feedback on Robot low level states
message Telemetry
{
    uint32            date              = 1;
    Chrono            chrono            = 2;
    NavState          nav               = 3;
    ActuatorsState    actuators         = 4;
    HmiState          hmi               = 5;
    StratInfo2017     stratInfo         = 6;
}

message ActuatorsCmd
{
    uint32 hasLifter              = 11;
    int32 lifter       = 1; //angle in per thousand
    uint32 hasLeftArm             = 12;
    int32 leftArm      = 2; //angle in per thousand
    uint32 hasRightArm            = 13;
    int32 rightArm     = 3; //angle in per thousand
    uint32 hasLeftWheel           = 14;
    int32 leftWheel    = 4; //angle in per thousand
    uint32 hasRightWheel          = 15;
    int32 rightWheel   = 5; //angle in per thousand
    uint32 hasFunnyAction         = 16;
    int32 funnyAction  = 6; //angle in per thousand
    
    uint32 	hasHighLevelCmd 	= 31;
    eActCmd highLevelCmd 		= 21;
}

message SerialNumber
{
    string value         = 1 [(nanopb).max_size = 16];
}

message GraphNodes {
    repeated Point nodes = 1 [(nanopb).max_count = 30];// !! CAUTION : Keep in sync with Graph.h (GRAPH_NUM_NODE)
}

//manual encoding to save space
message GraphLinks {
    uint32 count   = 4;
    string sources = 1 [(nanopb).max_size = 250];// !! CAUTION : Keep in sync with Graph.h (GRAPH_NUM_LINK)
    string targets = 2 [(nanopb).max_size = 250];// !! CAUTION : Keep in sync with Graph.h (GRAPH_NUM_LINK)
}

//manual encoding in string to save space
message GraphState{
    uint32               way_count   = 1;
    eGraphState          state       = 2;
    PointCap             startPoint  = 3;
    PointCap             targetPoint = 4;
    string               way         = 5 [(nanopb).max_size = 15];//  !! CAUTION : Keep in sync with Graph.h (GRAPH_NUM_NODE)
    repeated float       headings    = 7 [(nanopb).max_count = 15];//  !! CAUTION : Keep in sync with Graph.h (GRAPH_NUM_NODE)
    string               valid       = 6 [(nanopb).max_size = 250];// !! CAUTION : Keep in sync with Graph.h (GRAPH_NUM_LINK)
}

//WARNING : To keep in sync with RobotParameters.h/cpp
message Configuration
{
    string serialNumber           = 100 [(nanopb).max_size = 16];

    //Mechanics/Electronics related constants
    uint32 stepByTurn             = 41; //nb steps when the motor has made a complete revolution
    int32 xav                     = 42; //mm distance from the wheel center to the front of the robot
    int32 xar                     = 43; //mm distance from the wheel center to the rear of the robot
    int32 yside                   = 44; //mm distance from the robot center to a side
    int32 xavExtended             = 45; //mm distance from the wheel center to the front of the robot with arms out.
    int32 xarExtended             = 46; //mm distance from the wheel center to the rear of the robot with rear actuators out.
    int32 xouter                  = 47; //mm longest distance from wheels center
    //    calibration params
    float leftWheelDiameter       = 4; //mm
    float rightWheelDiameter      = 5; //mm
    float voie                    = 6; //mm (distance between the 2 wheels contact points)

    //Navigation config
    uint32 maxAcc                = 11; //in mm /s² maximal accelaration in linear motion
    uint32 maxSpeed              = 12; //in mm /s
    uint32 recalSpeed            = 14; //in mm /s
    uint32 maxTurnAcc            = 15; //in ° /s² maximal accelaration in rotations
    uint32 maxTurnSpeed          = 16; //in ° /s
    uint32 avoidanceDistFront    = 17; //in mm/s : maximal speed to brake within avoidance in front direction
    uint32 avoidanceDistRear     = 18; //in mm/s : maximal speed to brake within avoidance in rear direction

    //Avoidance config
    uint32 detectionWaitForOppMove = 21;  //in ms
    uint32 detectionActive         = 22; //activates (or not) the avoidance system.

    //Strat config
    uint32 strategyDuration      = 31; //in ms

    uint32 logDebug              = 32; //set to true to activate debug logs
    uint32 bipAllowed            = 33; //activate buzzer
}

//----------------------------------------------------------------------
// Multiplexer : this message is used to encapsulate all the other
//               so that several messages can be sent on the same
//               communication link.
//----------------------------------------------------------------------

message RemoteControlRequest
{
    oneof type
    {
        //messages from 0 to 99 are general purpose messages
        EmptyMsg             getOsStats         = 1;
        EmptyMsg             getOsStatsLogs     = 2;
        uint32               getTelemetry       = 3;
        EmptyMsg             reboot             = 4;
        Melody               requestPlaySound   = 5;
        EmptyMsg             getConfig          = 6;
        Configuration        setConfig          = 7;
        EmptyMsg             getComStatsLogs    = 8;
        EmptyMsg             getSerial          = 9;

        //messages from 100 to 199 are reserved fo strategy
        ConfigureMatch       configureMatch     = 100;
        EmptyMsg             startMatch         = 101;
        ActuatorsCmd         requestActuators   = 110;

        //messages from 200 to 299 are reserved fo navigation
        PointCap            setPosition         = 200;
        SetSpeedAcc         setSpeedAcc         = 201;
        RequestGoto         requestGoto         = 210;
        RequestGotoCap      requestGotoCap      = 211;
        float               requestGoForward    = 212;
        float               requestTurnDelta    = 213;
        float               requestTurnTo       = 214;
        Point               requestFaceTo       = 215;
        eTableBorder        recalFaceOnBorder   = 216;
        eTableBorder        recalRearOnBorder   = 217;
        RequestGotoCap      requestGraphTo      = 218;
        uint32              requestBlockRobot   = 230;
        EmptyMsg            requestMotionGraph  = 231;

        //messages from 300 to 399 for design tests
            //communication tests
        EmptyMsg            requestMaxLengthMsg = 300;
        EmptyMsg            requestCrcFailMsg   = 301;
        EmptyMsg            requestTooLittleMsg = 302;
    }
}

message RemoteControlResponse
{
    oneof type
    {
        Log                  log                  = 1;
        EmptyMsg             osStats              = 2;
        Configuration        config               = 3;
        SerialNumber         serialNumber         = 4;
        Telemetry            telemetry            = 200;
        GraphState           graphState           = 201;
        GraphNodes           graphNodes           = 202;
        GraphLinks           graphLinks           = 203;
    }
}