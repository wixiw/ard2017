syntax = "proto2";
package apb;

import "nanopb.proto";
import "Types.proto";


//This is a generic message when you have no parameters to set
message EmptyMsg {
}

message Point
{
    required float x = 1; //mm
    required float y = 2; //mm
}

message PointCap
{
    required float x = 1; //mm
    required float y = 2; //mm
    required float h = 3; //Â°
}

message NavState {
    required eNavState       state                  = 10; //current motion state
    required eNavOrder       order                  = 11; //current motion order
    required PointCap        pos                    = 12; //robot position
    required bool            omronFL                = 21; //front left omron, true = presence
    required bool            omronFR                = 22; //front right omron, true = presence
    required bool            omronRL                = 23; //rear left omron, true = presence
    required bool            omronRR                = 24; //rear right omron, true = presence
    required bool            switchRecalFL          = 30; //front left recal on border switch
    required bool            switchRecalFR          = 31; //front right recal on border switch
    required bool            switchRecalRC          = 32; //rear center recal on border switch
}

message ColorSensorState {
    required uint32            r                    = 1;
    required uint32            g                    = 2;
    required uint32            b                    = 3;
    required uint32            l                    = 4;
    required eObjectColor      color                = 5;
}

message ActuatorsState {
    required ColorSensorState   colorSensor        = 1;
    required bool               switchArmLout      = 2; //left arm extended (fully outside robot) position end course switch
    required bool               switchArmLin       = 3; //left arm retracted (fully inside robot) position end course switch
    required bool               switchArmRout      = 4; //right arm extended (fully outside robot) position end course switch
    required bool               switchArmRin       = 5; //right arm retracted (fully inside robot) position end course switch
    required bool               omronCylinder      = 6; //swallow mouth cylinder presence detection (lateral omron)
    required bool               switchCylinder     = 7; //swallow mouth cylinder ready to lift, switch detection
    required bool               omronSpare         = 8; //Rear center spare omron, close to the recal switch
    required bool               switchLifterUp     = 9; //lifter upside end course switch
    required bool               switchLifterDown   = 10; //lifter upside end course switch

    required int32              servoLifter        = 30;
    required int32              servoLeftArm       = 31;
    required int32              servoRightArm      = 32;
    required int32              servoLeftWheel     = 33;
    required int32              servoRightWheel    = 34;
    required int32              servoFunnyAction   = 35;
}

message HmiState {
    required bool               led1               = 2;
    required bool               led2               = 3;
    required bool               led3               = 4;
    required bool               led4               = 5;
    required uint32             ledRgb             = 6;
    required bool               start              = 7;
    required bool               colorSwitch        = 8;
    required bool               user1              = 9;
    required bool               user2              = 10;
    required bool               ledDue_Rx          = 11;
    required bool               ledDue_Tx          = 12;
    required bool               ledDue_L           = 13;
}


message Tone
{
    required uint32 frequency = 1; //Hz
    required uint32 duration = 2; //ms
}

message Melody
{
    repeated Tone tones = 1 [(nanopb).max_count = 150]; //size to be adjusted with Buzzer2017.cpp
}


