syntax = "proto3";
package apb;

import "nanopb.proto";
import "Types.proto";


//This is a generic message when you have no parameters to set
message EmptyMsg {
}

message Point
{
    float x = 1; //mm
    float y = 2; //mm
}

message PointCap
{
    float x = 1; //mm
    float y = 2; //mm
    float h = 3; //Â°
}

message Chrono {
    bool       started         = 1; // is the match started
    uint32     chrono_ms       = 2; // time since beginnnog of the match
    uint32     timeLeft_ms     = 3; // time left for the match (funny action non included)
}

message NavState {
    eNavState       state                  = 10; //current motion state
    eNavOrder       order                  = 11; //current motion order
    PointCap        pos                    = 12; //robot position
    bool            omronFL                = 21; //front left omron, true = presence
    bool            omronFR                = 22; //front right omron, true = presence
    bool            omronRL                = 23; //rear left omron, true = presence
    bool            omronRR                = 24; //rear right omron, true = presence
    bool            switchRecalFL          = 30; //front left recal on border switch
    bool            switchRecalFR          = 31; //front right recal on border switch
    bool            switchRecalRC          = 32; //rear center recal on border switch
}

message ColorSensorState {
    uint32            r                    = 1;
    uint32            g                    = 2;
    uint32            b                    = 3;
    uint32            l                    = 4;
    eObjectColor      color                = 5;
}

message ActuatorsState {
    ColorSensorState   colorSensor        = 1;
    bool               switchArmLout      = 2; //left arm extended (fully outside robot) position end course switch
    bool               switchArmLin       = 3; //left arm retracted (fully inside robot) position end course switch
    bool               switchArmRout      = 4; //right arm extended (fully outside robot) position end course switch
    bool               switchArmRin       = 5; //right arm retracted (fully inside robot) position end course switch
    bool               omronCylinder      = 6; //swallow mouth cylinder presence detection (lateral omron)
    bool               switchCylinder     = 7; //swallow mouth cylinder ready to lift, switch detection
    bool               omronSpare         = 8; //Rear center spare omron, close to the recal switch
    bool               switchLifterUp     = 9; //lifter upside end course switch
    bool               switchLifterDown   = 10; //lifter upside end course switch

    int32              servoLifter        = 30;
    int32              servoLeftArm       = 31;
    int32              servoRightArm      = 32;
    int32              servoLeftWheel     = 33;
    int32              servoRightWheel    = 34;
    int32              servoFunnyAction   = 35;
}

message HmiState {
    bool               led1               = 2;
    bool               led2               = 3;
    bool               led3               = 4;
    bool               led4               = 5;
    uint32             ledRgb             = 6;
    bool               start              = 7;
    bool               colorSwitch        = 8;
    bool               user1              = 9;
    bool               user2              = 10;
    bool               ledDue_Rx          = 11;
    bool               ledDue_Tx          = 12;
    bool               ledDue_L           = 13;
}


message Tone
{
    uint32 frequency = 1; //Hz
    uint32 duration = 2; //ms
}

message Melody
{
    repeated Tone tones = 1 [(nanopb).max_count = 150]; //size to be adjusted with Buzzer.cpp
}

message StratInfo2017
{
    eColor matchColor                     = 100;

    uint32 dispenserMonocolorNb           = 1; //Nb cylinders remaining in our mono-color dispenser
    uint32 dispenserBicolorNb             = 2; //Nb cylinders remaining in our bi-color dispenser
    uint32 dispenserOppNb                 = 3; //Nb cylinders remaining in opponent dispenser

    uint32 containerMidleCenterNb         = 4; //Nb cylinders present in the middle center container
    uint32 containerMidleOwnNb            = 5; //Nb cylinders present in the middle container on our side
    uint32 containerMidleOppNb            = 6; //Nb cylinders present in the middle container on opponent side
    uint32 containerBorderNb              = 7; //Nb cylinders present in the border container on our side
    uint32 containerBorderOppNb           = 8; //Nb cylinders present in the border container on opponent side
    uint32 containerStartNb               = 9; //Nb cylinders present in our start area

    bool   cylinderStart                  = 10; //Cylinder close to our start position is present on table
    bool   cylinderContainer              = 11; //Cylinder close to our midle center container is present on table
    bool   cylinderCenter                 = 12; //Cylinder in the middle of our table side is present on table
    bool   cylinderCorner                 = 13; //Cylinder close to our start position table corner is present on table
    bool   cylinderCrater                 = 14; //Cylinder close to our bottom craters is present on table
    bool   cylinderOppStart               = 15; //Cylinder close to opponent start position is present on table
    bool   cylinderOppContainer           = 16; //Cylinder close to opponent midle center container is present on table
    bool   cylinderOppCenter              = 17; //Cylinder in the middle of opponent table side is present on table
    repeated uint32  stock                = 19 [(nanopb).max_count = 6]; //The type of each stocked cylinder (index 0 is highest level, and 5 is stocked in arms)

    uint32 score                          = 20; //Expected match point count
}
